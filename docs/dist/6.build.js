webpackJsonp([6],{33:function(e,t,a){var n=a(8)(a(42),a(78),null,null,null);e.exports=n.exports},42:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mounted:function(){var e=document.createElement("script");e.src="/vue-croppa/static/ei.js",document.body.appendChild(e)}}},78:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{attrs:{id:"manipulation"}},[a("v-layout",{attrs:{row:"",wrap:""}},[a("v-flex",[a("v-expansion-panel",{attrs:{expand:""}},[a("v-expansion-panel-content",{attrs:{value:!0}},[a("div",{staticClass:"title",slot:"header"},[e._v("Base64 data url")]),e._v(" "),a("div",{staticClass:"pt-2 pl-2"},[e._v("\n            Use method\n            "),a("code",[e._v("generateDataUrl (mimetype, compressionRate)")]),e._v(" to get the base64 data url. You can specify mimetype and compressionRate to compress the file size.\n            "),a("v-layout",[a("v-flex",[a("p",{staticClass:"codepen",attrs:{"data-height":"300","data-theme-id":"19967","data-slug-hash":"gxmXMJ","data-default-tab":"html,result","data-user":"zhanziyang","data-embed-version":"2","data-pen-title":"Vue Croppa data url"}},[e._v("See the Pen\n                  "),a("a",{attrs:{href:"https://codepen.io/zhanziyang/pen/gxmXMJ/"}},[e._v("Vue Croppa data url")]),e._v(" by Chris (\n                  "),a("a",{attrs:{href:"https://codepen.io/zhanziyang"}},[e._v("@zhanziyang")]),e._v(") on\n                  "),a("a",{attrs:{href:"https://codepen.io"}},[e._v("CodePen")]),e._v(".")])])],1)],1)])],1),e._v(" "),a("br"),e._v(" "),a("v-expansion-panel",{attrs:{expand:""}},[a("v-expansion-panel-content",{attrs:{value:!0}},[a("div",{staticClass:"title",slot:"header"},[e._v("Blob")]),e._v(" "),a("div",{staticClass:"pt-2 pl-2"},[a("blockquote",[e._v("A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.")])]),e._v(" "),a("div",{staticClass:"pt-2 pl-2 pb-2"},[e._v("\n            Use methods:\n            "),a("ul",[a("li",[a("code",[e._v("generateBlob(callback, mimeType, compressionRate)")]),e._v(". The callback function has the resulting Blob object as a single argument. You can specify mimetype and compressionRate to compress the file size. This method is a wrapper around\n                "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob"}},[e._v("HTMLCanvasElement.toBlob()")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("(async) promisedBlob(mimeType, compressionRate)")]),e._v(". Same as above except it returns a Promise wrapping around generateBlob(), so that you can use async/await syntax instead of a callback to get blob data, it's simpler.")])]),e._v(" "),a("v-layout",[a("v-flex",[a("p",{staticClass:"codepen",attrs:{"data-height":"300","data-theme-id":"19967","data-slug-hash":"qXrpmW","data-default-tab":"js,result","data-user":"zhanziyang","data-embed-version":"2","data-pen-title":"Vue Croppa data url"}},[e._v("See the Pen\n                  "),a("a",{attrs:{href:"https://codepen.io/zhanziyang/pen/qXrpmW/"}},[e._v("Vue Croppa data url")]),e._v(" by Chris (\n                  "),a("a",{attrs:{href:"https://codepen.io/zhanziyang"}},[e._v("@zhanziyang")]),e._v(") on\n                  "),a("a",{attrs:{href:"https://codepen.io"}},[e._v("CodePen")]),e._v(".")])])],1)],1)])],1)],1)],1)],1)},staticRenderFns:[]}}});